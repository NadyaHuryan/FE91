"use strict"


/////////////////////////     Hw 5     /////////////////////////

// ### NORMAL level

// #### Task 1 üíª

// –°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –æ–±—å–µ–∫—Ç–∞. 

const obj = {
    userName: "Liza",
    userAge: '20',
}


delete obj.userName;
delete obj.userAge;


console.log(obj);

// #### Task 2 üñ•

// –°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –æ–±—å–µ–∫—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å **true**

const obj2 = {
    userName: "Liza",
    userAge: '20',
}


console.log("userAge" in obj2);


// #### Task 3 üñ•

// –î–∞–Ω –æ–±—å–µ–∫—Ç:
// C –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ **for in** –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∫–ª—é—á–∏, –ø–æ—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –æ–±—å–µ–∫—Ç–∞.

const student = {
    name: 'John',
    age: 19,
    isHappy: true
}


for (let key in student) {
    console.log(key);
} // –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∫–ª—é—á–∏


for (let key in student) {
    console.log(student[key]);
} // –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π

// #### Task 4 üñ•

// –î–∞–Ω –æ–±—å–µ–∫—Ç:
// –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–æ –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–∏–Ω–∏–π

const colors = {
    'ru pum pu ru rum': {
        red: '–∫—Ä–∞—Å–Ω—ã–π',
        green: '–∑–µ–ª–µ–Ω—ã–π',
        blue: '—Å–∏–Ω–∏–π'
    },
};


console.log(colors['ru pum pu ru rum'].red);
console.log(colors['ru pum pu ru rum'].blue);

// #### Task 5 üñ•

// –î–∞–Ω –æ–±—å–µ–∫—Ç:
// –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

let salaries = {
    andrey: 500,
    sveta: 413,
    anton: 987,
    andrey1: 664,
    alexandra: 199
}

let sum = 0,
    count = 0;

for (const key in salaries) {
    sum += salaries[key];
    count++;
}

let averageSalary = sum / count;

console.log(averageSalary);

// #### Task 6 üñ•

// –°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ó–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ–±—å–µ–∫—Ç.
// –ü–æ—Ç–æ–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–í–∞—Ç—å**.

// let userData = function() {
//     let login = prompt('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω');
//     let password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
//     let userObject = {
//         login: login,
//         password: password,
//         register: userRegisterCheck(),
//     };
//     return userObject;
// }

// let userRegisterCheck = function() {
//     let userLogin = prompt('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–æ–≥–∏–Ω');
//     let userPassword = prompt('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
    
//     if (userLogin == this.login && userPassword == this.password) {
//         console.log('Wrong data');
//     } else {
//         console.log('Welcome');
//     }
// }

// let user = userData();
// user.userObject.register;

// ### ADVANCED level

// #### Task 1 üë®‚Äçüè´

// –ú—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–º –º–∞—Ç—á–µ, —Å—á–µ—Ç –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–æ–≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 9 –º—è—á–µ–π. –ñ–∞–ª—å —á—Ç–æ –Ω–∞–º –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '2:5', –≤–µ–¥—å –Ω–∞–º –Ω–∞–¥–æ —ç—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–∞–º–∏. –î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞ –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.

// #### Task 2 üñ•

// –î–∞–Ω—ã –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—å–µ–∫—Ç–∞. –°—Ä–∞–≤–Ω–∏—Ç–µ –∏—Ö —Ç–∞–∫ —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ä–∞–≤–Ω—ã

let student1 = {
    name: 'Polina',
    age: 27,
}

let student2 = {
    name: 'Polina',
    age: 27,
}

console.log(JSON.stringify(student1) === JSON.stringify(student2)); // –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Å–≤-–≤–∞ –±—É–¥—É—Ç –∏–¥—Ç–∏ –Ω–µ –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
// console.log(_.isEqual(student1, student2)); //—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π lodash

//–ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isEqual(student1, student2) {
    const props1 = Object.getOwnPropertyNames(student1); // The Object.getOwnPropertyNames() method returns an array of all properties found directly in a given object.
    const props2 = Object.getOwnPropertyNames(student2);

    if (props1.length !== props2.length) {
        return false;
    }

    for (let i = 0; i < props1.length; i += 1) {
        const prop = props1[i];

        if (student1[prop] != student2[prop]) {
            return false;
        }
    }

    return true;
}

console.log(isEqual(student1, student2));


// #### Task 3 üñ•

// –£ –Ω–∞—Å –µ—Å—Ç—å –æ–±—å–µ–∫—Ç —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏. –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ —É–∑–Ω–∞—Ç—å –∏–º—è –ø—Ç–∏—Ü—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å. –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –≤ —ç—Ç–æ–º –æ–±—å–µ–∫—Ç–µ –Ω–µ—Ç—É –ø—Ç–∏—Ü—ã. –ï—Å–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —É–∑–Ω–∞—Ç—å –∏–º—è –º—ã –ø–æ–ª—É—á–∏–º **–û–®–ò–ë–ö–£**.
// –ó–∞–¥–∞—á–∞ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—å–µ–∫—Ç—É –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É —á—Ç–æ–±—ã –Ω–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¥–∞–ª—å—à–µ.

const animals = {
    cat: {
        name: '–ï–Ω—á–∏–∫',
        age: 3,
    },
    dog: {
        name: '–û—Ä–µ–æ',
        age: 2,
    }
}

// –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π

console.log(animals?.birdName);







///////////////////////   Hw 6   /////////////////////////

// ### NORMAL level

//function declaration : var(let) sum = function(a, b) { return a + b;}

//arrow function : let func = (arg1, arg2, ...argN) => expression;

// #### Task 1 üñ•

// –í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`forEach`**

const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];

//function declaration
fibonacci.forEach(function (key) {
    console.log(key);
});

//arrow function
fibonacci.forEach((key) => {
    console.log(key);
});


// #### Task 2 üñ•

// –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`map`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ **`users`**, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:

// > ['member 1: Darya', 'member 2: Masha', ... etc]

const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton'];

//function declaration
let members = users.map(function (key, i) {
    return `member ${i + 1}: ${key}`;
});

console.log(members);


//arrow function
let members1 = users.map((key, i) => "member " + `${i + 1}` + ": " + key);

console.log(members1);

// #### Task 3 üñ•

// –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`filter`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.

const numbers = [7, -4, 32, -90, 54, 32, -21]

//function declaration

let positiveNumbers = numbers.filter(function (key) {
    return key > 0;
});

console.log(positiveNumbers);

//arrow function

let positiveNumbers1 = numbers.filter((key) => key > 0);

console.log(positiveNumbers1);


// #### Task 4 üñ•

// –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`reduce`** –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.

const fibonacci1 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]

//function declaration

let fibonacci1Sum = fibonacci1.reduce(function (numb, key) {
    return numb + key;
}, 0);

console.log(fibonacci1Sum);

//arrow function

let fibonacci1Sum1 = fibonacci1.reduce((numb, key) => numb + key);

console.log(fibonacci1Sum1);

// #### Task 5 üñ•

// –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`find`** –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.

const numbers1 = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]

//function declaration

let even = numbers1.find(function (key) {
    return key % 2 == 0;
});

console.log(even);

//arrow function

let even1 = numbers1.find((key) => key % 2 == 0);

console.log(even1);