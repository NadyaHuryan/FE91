"use strict";

//##### Task 1 üñ• #####

const colors = ['red', 'green', 'blue'];
console.log(colors.length);

//##### Task 2 üñ• #####

const animals = ['monkey', 'dog', 'cat'];
console.log(animals[animals.length - 1]);
console.log(animals.at(-1));

//##### Task 3 üñ• #####

// –°–ø–æ—Å–æ–± 1
const numbers = [5, 43, 63, 23, 90];
numbers.length = 0;
console.log(numbers);

// –°–ø–æ—Å–æ–± 2
const numbers = [5, 43, 63, 23, 90];
numbers.splice(0);
console.log(numbers);

//##### Task 4 üñ• #####

const students = ['Polina', 'Dasha', 'Masha'];
// –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
// students[2] = `Borya`;
// students[0] = `Andrey`; 

// –∞ —Ç–∞–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é:
students.pop();
students.push(`Borya`);

students.shift();
students.unshift(`Andrey`);
console.log(students);

//##### Task 5 üñ• #####

const cats = ['Gachito', 'Tom', 'Batman'];
for (let i = 0; i < cats.length; i++) {
    console.log(cats[i]);
}

const cats_ = ['Gachito', 'Tom', 'Batman'];
for (let value of cats_) {
    console.log(value);
}

//##### Task 6 üñ• #####

const evenNumbers = [2, 4, 6, 8, 10];
const oddNumbers = [1, 3, 5, 7, 9];
const allNumbers = evenNumbers.concat(oddNumbers);
console.log(allNumbers);
console.log("–ò–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ 8 —Ä–∞–≤–µ–Ω " + allNumbers.indexOf(8));

//##### Task 7 üñ• #####

const binary = [0, 0, 0, 0];
let strBinary = binary.join("1");
console.log(strBinary);

//##### Task 8 üñ• #####

//–º–µ—Ç–æ–¥ includes –∏—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ (–≤—Å—ë–º –º–∞—Å—Å–∏–≤–µ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—è —Å 
// –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞), —Å—Ö–æ–∂ c –º–µ—Ç–æ–¥–æ–º indexOf(), –Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞ 
// —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false. –ö–∞–∫ –ø—Ä–∏–º–µ—Ä –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞ (—Å–∏–º–≤–æ–ª—ã) –≤ —Å—Ç—Ä–æ–∫–∞—Ö:

let string = "–Ø –ª—é–±–ª—é –∫–æ–¥–∏—Ç—å –ø–æ –Ω–æ—á–∞–º";
let search = string.includes("–∫–æ–¥–∏—Ç—å"); // true

// –∏–ª–∏ –∏–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–∞—Ö:

const students_ = ['Polina', 'Dasha', 'Masha'];
let searchName = students_.includes('Polina'); // true
let searchName_ = students_.includes('Polina', 1); // false, –∏—â–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–∞ 1


//##### Task 9 üñ• #####

// –º–µ—Ç–æ–¥ splice() –¥–ª—è —Å—Ç–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ú–µ—Ç–æ–¥ slice() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
// —á–∞—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ –º–µ–Ω—è—è –µ—ë).

let str1 = '–ù–µ –∑–∞–±—ã—Ç—å –ø–æ—Å–∞–¥–∏—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É!';
let str2 = str1.slice(0); // –≤–µ—Ä–Ω—ë—Ç —Å—Ç–æ—Ä–æ–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

let str3 = str1.slice(3, 9); // –≤–µ—Ä–Ω—ë—Ç –∫—É—Å–æ–∫ —Å—Ç—Ä–æ–∫–∏ - —Å–∏–º–≤–æ–ª—ã —Å 3 –ø–æ 9 ('–∑–∞–±—ã—Ç—å')


// ##### ADVANCED level #####
// (—Ä–µ—à–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç—É—Ç "–º—ã—Å–ª–∏ –≤—Å–ª—É—Ö" —É—Å–ª–æ–≤–Ω–æ)

//##### Task 1 üë®‚Äçüè´ #####

function isPalindrom(someWord) {
    let arrSomeWord = someWord.split("");
    let arrReverse = arrSomeWord.reverse();
    for (i = 0; i < arrSomeWord; i++) {
        if (arrSomeWord[i] == arrReverse[i]){
            return console.log(someWord + '–ø–∞–ª–∏–Ω–¥—Ä–æ–º');
    } else {
        return console.log('–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')
    }
    }
}
isPalindrom('abba');

//##### Task 2 üë®‚Äçüè´ #####

const matrix = [
    [12, 98, 78, 65, 23],
    [54, 76, 98, 43, 65],
    [13, 324, 65, 312],
    [9092, 22, 45, 90000],
]

//##### Task 3 üë®‚Äçüè´ #####

const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4];
let positiveNumbers = [];
let negativeNumbers = [];
for (let i = 0; i < mixedNumbers.length; i++) {
    if (mixedNumbers[i] >= 0) {
        positiveNumbers = positiveNumbers.push(mixedNumbers[i]);
    } else {
        negativeNumbers = negativeNumbers.push(mixedNumbers[i]);
    }
    console.log(positiveNumbers);
    console.log(negativeNumbers);
}


//##### Task 4 üë®‚Äçüè´ #####

 let myArr = [-2, -1, -3, 15, 0, -4, 2, -5, 9, -15, 0, 4, 5, -6, 10, 7];
 let arrCube = myArr.map(item => item ** 3);
 console.log(myArr);
 console.log(arrCube);