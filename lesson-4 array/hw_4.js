"use strict";

/* <h1 align="center">Arrays</h1> */

// ## Complete exercise

// ### –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
// ### NORMAL level

// #### Task 1 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const colors = ['red', 'green', 'blue']
// ```
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –¥–ª–∏–Ω—É.
console.log("Task 1");

const colors = ["red", "green", "blue"];
console.log(colors.length);

// #### Task 2 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const animals = ['monkey', 'dog', 'cat']
// ```

// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã.
console.log("Task 2");

const animals = ["monkey", "dog", "cat"];
console.log(animals[animals.length - 1]);

// #### Task 3 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const numbers = [5, 43, 63, 23, 90]
// ```

// –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// > –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
console.log("Task 3");

const numbers = [5, 43, 63, 23, 90];
console.log(numbers);

numbers.length = 0; // 1-–π –≤–∞—Ä–∏–∞–Ω—Ç
numbers.splice(0); // 2-–π –≤–∞—Ä–∏–∞–Ω—Ç
console.log(numbers);

// #### Task 4 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const students = ['Polina', 'Dasha', 'Masha']
// ```

// + –£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Borya`.
// + –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Andrey`.
// + –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
console.log("Task 4");
const students = ["Polina", "Dasha", "Masha"];
console.log(students);

//  1-–π –≤–∞—Ä–∏–∞–Ω—Ç

//  students.pop()
//  console.log(students)
//  students.push('Borya')
//  console.log(students)
//  students.shift()
//  console.log(students)
//  students.unshift('Andrey')
//  console.log(students)

//  2-–π –≤–∞—Ä–∏–∞–Ω—Ç

students.splice(0, 1, "Borya");
console.log(students);
students.splice(-1, 1, "Andrey");
console.log(students);

// #### Task 5 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const cats = ['Gachito', 'Tom', 'Batman']
// ```

// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª **`for`**, –∑–∞—Ç–µ–º **`for of`**.
console.log("Task 5");
const cats = ["Gachito", "Tom", "Batman"];
for (let i = 0; i < cats.length; i++) {
  console.log(cats[i]);
}
for (let value of cats) {
  console.log(value);
}

// #### Task 6 üñ•

// ```javascript
//     const evenNumbers = [2, 4, 6, 8, 10]
//     const oddNumbers = [1, 3, 5, 7, 9]
// ```

// + –°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω.
// + –í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ **`8`**

console.log("Task 6");

const evenNumbers = [2, 4, 6, 8, 10];
console.log(evenNumbers);
const oddNumbers = [1, 3, 5, 7, 9];
console.log(oddNumbers);

const allNumbers = evenNumbers.concat(oddNumbers);
console.log(allNumbers);
console.log(allNumbers.indexOf(8));

// #### Task 7 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//     const binary = [0, 0, 0, 0]
// ```

// + –ù–∞—à –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –≤ –Ω–µ–º —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü.
// + –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.

// > [0, 0, 0, 0] -> '0101010'
console.log("Task 7");

const binary = [0, 0, 0, 0];
console.log(binary.join("1"));

// #### Task 8 üñ•

// –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ includes? –ü—Ä–∏–≤–µ—Å—Ç–∏ 2 –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
console.log("Task 8");
const arr = ["–í–∞—Å—è", "–ü–µ—Ç—è", "–ú–∞—à–∞"];
// –º–µ—Ç–æ–¥ includes –∏—â–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω—ã–π, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false

arr.includes("–ü–µ—Ç—è"); //1-–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
arr.includes("–ö–æ–ª—è"); //2-–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false

// #### Task 9 üñ•
// –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ splice –∏ slice –¥–ª—è —Å—Ç—Ä–æ–∫? –ü—Ä–∏–≤–µ—Å—Ç–∏ 2 –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
console.log("Task 9");

let string = "–∫–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å";
//–ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, –º–µ—Ç–æ–¥ slice –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è  –≤—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–∏–±–æ –µ–µ —á–∞—Å—Ç—å –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ –≤—Ç–æ—Ä–æ–≥–æ (–≤—Ç–æ—Ä–æ–π –∏–Ω–¥–µ–∫—Å –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è)
string.slice(7, 14);
console.log(string.slice(7, 14));

// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –º–µ—Ç–æ–¥–∞ splice –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å. –í –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ. –ü–æ–ª–∞–≥–∞—é, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
//   console.log(string.splice(7, 14));

// ### ADVANCED level

// > –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª—ã **`for`** –∏–ª–∏ **`for of`**

// #### Task 1 üë®‚Äçüè´

// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
console.log("Task 1 ADVANCED");

let strSplit = "";
let strReverse = "";
let strJoin = "";
function isPalindrome(str) {
  strSplit = str.split("");
  strReverse = strSplit.reverse();
  strJoin = strReverse.join("");
  if (strJoin === str) {
    return `—Å–ª–æ–≤–æ "${str}" —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º`;
  } else {
    return `—Å–ª–æ–≤–æ "${str}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º`;
  }
}
console.log(isPalindrome("—à–∞–ª–∞—à"));

// #### Task 2 üë®‚Äçüè´

// > –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
// ```javascript
// const matrix = [
//     [12, 98, 78, 65, 23],
//     [54, 76, 98, 43, 65],
//     [13, 324, 65, 312],
//     [9092, 22, 45, 90000],
// ]

console.log("Task 2 ADVANCED");
const matrix = [
  [12, 98, 78, 65, 23],
  [54, 76, 98, 43, 65],
  [13, 324, 65, 312],
  [9092, 22, 45, 90000],
];

let avg = 0;
let sum_j = 0;

for (let i = 0; i < matrix.length; i++) {
  for (let j = 0; j < matrix[i].length; j++) {
    sum_j = sum_j + +matrix[i][j];
    avg++;
  }
}

console.log(sum_j / avg);

// #### Task 3 üë®‚Äçüè´

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// ```javascript
//    const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4]
// ```

// –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞, –≤ –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0, –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

console.log("Task 3 ADVANCED");
const negativeNumbers = [];
const positiveNumbers = [];
const mixedNumbers = [-14, 24, -89, 43, 0, -1, 412, 4];
for (let i = 0; i < mixedNumbers.length; i++) {
  if (mixedNumbers[i] >= 0) {
    positiveNumbers.push(mixedNumbers[i]);
  } else {
    negativeNumbers.push(mixedNumbers[i]);
  }
}
console.log(positiveNumbers);
console.log(negativeNumbers);

// #### Task 4 üë®‚Äçüè´
// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5, –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª. –î–∞–ª–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫—É–± –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ—Å—Ç–∏ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.

console.log("Task 4 ADVANCED");

let min = -25;
let max = 25;
const randomNumbers = [];
const cubeRandomNumbers = [];
for (let i = 0; i < 5; i++) {
  randomNumbers.push(Math.floor(Math.random() * (max - min) + min));
}

for (let i = 0; i < randomNumbers.length; i++) {
  cubeRandomNumbers.push(randomNumbers[i] ** 3);
}

console.log(randomNumbers);
console.log(cubeRandomNumbers);
